{
  "master": {
    "tasks": [
      {
        "id": 21,
        "title": "Setup Nuxt.js Project",
        "description": "Initialize a Nuxt.js project with pnpm, TailwindCSS, and Lucide icons.",
        "details": "1. Create a new Nuxt.js project using `pnpm create nuxt-app`. 2. Install TailwindCSS and configure it for the project. 3. Add Lucide icons for UI elements. 4. Verify the setup with a basic 'Hello World' page.",
        "testStrategy": "Ensure the project runs without errors and the 'Hello World' page displays correctly with TailwindCSS and Lucide icons.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Nuxt.js Project",
            "description": "Create a new Nuxt.js project using pnpm",
            "dependencies": [],
            "details": "Run 'pnpm create nuxt@latest' and follow prompts to set up the project structure. Ensure Node.js and pnpm are pre-installed.",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Configure TailwindCSS",
            "description": "Install and integrate TailwindCSS into the Nuxt.js project",
            "dependencies": [
              1
            ],
            "details": "Install dependencies via 'pnpm add -D tailwindcss postcss autoprefixer'. Generate config files, update nuxt.config.ts, and create tailwind.css.",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Add Lucide Icons",
            "description": "Install and set up Lucide icon library",
            "dependencies": [
              2
            ],
            "details": "Install package via 'pnpm add lucide-vue-next'. Register icons as a Nuxt plugin or import directly in components.",
            "status": "done"
          },
          {
            "id": 4,
            "title": "Create Verification Page",
            "description": "Build a test page to confirm setup functionality",
            "dependencies": [
              3
            ],
            "details": "Create a 'hello-world.vue' page with Tailwind styling and a Lucide icon. Run 'pnpm dev' to verify output in browser.",
            "status": "done"
          }
        ]
      },
      {
        "id": 22,
        "title": "Implement Vueform Integration",
        "description": "Integrate Vueform into the Nuxt.js project for form handling.",
        "details": "1. Install Vueform and its Vue plugin. 2. Configure Vueform to use JSON schema for form definitions. 3. Test with a simple form to ensure validation and submission work.",
        "testStrategy": "Validate form submission and ensure Vueform renders forms correctly based on the provided schema.",
        "priority": "high",
        "dependencies": [
          21
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Install Vueform and Vue Plugin",
            "description": "Install Vueform library and Vue plugin via package manager",
            "dependencies": [],
            "details": "Use npm or yarn to add Vueform dependencies. Ensure compatibility with the current Vue version and project setup.",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Test Simple Form Implementation",
            "description": "Validate form rendering, validation, and submission functionality",
            "dependencies": [
              2
            ],
            "details": "Create a basic form. Test field interactions.",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Configure Vueform with JSON Schema",
            "description": "Set up Vueform using a JSON schema for form structure",
            "dependencies": [
              1
            ],
            "details": "Define form fields, validation rules, and layout in a JSON schema. Import and initialize Vueform in the application with this configuration.",
            "status": "pending"
          }
        ]
      },
      {
        "id": 23,
        "title": "Create Initial Form Questions (GOAL & PURPOSES)",
        "description": "Implement the first two questions (GOAL and PURPOSES) using Vueform.",
        "details": "1. Define JSON schema for GOAL and PURPOSES questions. 2. Render these questions in the UI using Vueform. 3. Ensure navigation between questions works.",
        "testStrategy": "Test form navigation and validation for the first two questions.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Export Functionality",
        "description": "Allow users to export their form data at any step.",
        "details": "1. Add a button to trigger export. 2. Serialize form data to JSON. 3. Provide a downloadable file.",
        "testStrategy": "Verify exported data matches the current form state and can be downloaded.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Implement Import Functionality",
        "description": "Allow users to import saved form data at the start.",
        "details": "1. Add an import button on the landing page. 2. Parse imported JSON and populate the form. 3. Validate imported data.",
        "testStrategy": "Ensure imported data correctly populates the form and validation works.",
        "priority": "medium",
        "dependencies": [
          22,
          24
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Integrate Remaining Questions",
        "description": "Add the remaining questions (POLICIES to ORDERS) to the form.",
        "details": "1. Define JSON schema for all remaining questions. 2. Render them in the UI. 3. Ensure sequential navigation.",
        "testStrategy": "Test form flow and validation for all questions.",
        "priority": "medium",
        "dependencies": [
          23
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Add Internationalization Support",
        "description": "Support EN, FR, and DE locales for the form.",
        "details": "1. Configure Nuxt.js for i18n. 2. Translate form labels and messages. 3. Add language switcher.",
        "testStrategy": "Verify translations and language switching work correctly.",
        "priority": "low",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Implement PDF Report Generation",
        "description": "Allow users to generate a PDF report of their final plan.",
        "details": "1. Use a library like jsPDF or PDFKit. 2. Format form data into a PDF. 3. Add a download button.",
        "testStrategy": "Ensure the PDF contains all form data and is downloadable.",
        "priority": "medium",
        "dependencies": [
          26
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Optimize Deployment Bundle",
        "description": "Prepare the app for deployment as a single HTML/JS bundle.",
        "details": "1. Configure Nuxt.js for static site generation. 2. Optimize assets. 3. Test the build locally.",
        "testStrategy": "Verify the build process completes without errors and the app runs in production mode.",
        "priority": "low",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Final Testing and QA",
        "description": "Conduct comprehensive testing of all features.",
        "details": "1. Test form navigation, validation, and data persistence. 2. Verify PDF generation and import/export functionality. 3. Check internationalization.",
        "testStrategy": "Perform end-to-end testing to ensure all features work as expected.",
        "priority": "high",
        "dependencies": [
          23,
          24,
          25,
          26,
          27,
          28,
          29
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-15T12:16:43.216Z",
      "updated": "2025-06-15T19:53:41.493Z",
      "description": "Tasks for master context"
    }
  }
}